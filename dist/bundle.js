!function(e){var t={};function s(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=e,s.c=t,s.d=function(e,t,o){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(s.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)s.d(o,r,function(t){return e[t]}.bind(null,r));return o},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=0)}([function(e,t,s){"use strict";s.r(t),s.d(t,"MyElement",(function(){return Ce}));
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const o="undefined"!=typeof window&&null!=window.customElements&&void 0!==window.customElements.polyfillWrapFlushCallback,r=(e,t,s=null)=>{for(;t!==s;){const s=t.nextSibling;e.removeChild(t),t=s}},i=`{{lit-${String(Math.random()).slice(2)}}}`,n=`\x3c!--${i}--\x3e`,a=new RegExp(`${i}|${n}`);class c{constructor(e,t){this.parts=[],this.element=t;const s=[],o=[],r=document.createTreeWalker(t.content,133,null,!1);let n=0,c=-1,h=0;const{strings:d,values:{length:f}}=e;for(;h<f;){const e=r.nextNode();if(null!==e){if(c++,1===e.nodeType){if(e.hasAttributes()){const t=e.attributes,{length:s}=t;let o=0;for(let e=0;e<s;e++)l(t[e].name,"$lit$")&&o++;for(;o-- >0;){const t=d[h],s=u.exec(t)[2],o=s.toLowerCase()+"$lit$",r=e.getAttribute(o);e.removeAttribute(o);const i=r.split(a);this.parts.push({type:"attribute",index:c,name:s,strings:i}),h+=i.length-1}}"TEMPLATE"===e.tagName&&(o.push(e),r.currentNode=e.content)}else if(3===e.nodeType){const t=e.data;if(t.indexOf(i)>=0){const o=e.parentNode,r=t.split(a),i=r.length-1;for(let t=0;t<i;t++){let s,i=r[t];if(""===i)s=p();else{const e=u.exec(i);null!==e&&l(e[2],"$lit$")&&(i=i.slice(0,e.index)+e[1]+e[2].slice(0,-"$lit$".length)+e[3]),s=document.createTextNode(i)}o.insertBefore(s,e),this.parts.push({type:"node",index:++c})}""===r[i]?(o.insertBefore(p(),e),s.push(e)):e.data=r[i],h+=i}}else if(8===e.nodeType)if(e.data===i){const t=e.parentNode;null!==e.previousSibling&&c!==n||(c++,t.insertBefore(p(),e)),n=c,this.parts.push({type:"node",index:c}),null===e.nextSibling?e.data="":(s.push(e),c--),h++}else{let t=-1;for(;-1!==(t=e.data.indexOf(i,t+1));)this.parts.push({type:"node",index:-1}),h++}}else r.currentNode=o.pop()}for(const e of s)e.parentNode.removeChild(e)}}const l=(e,t)=>{const s=e.length-t.length;return s>=0&&e.slice(s)===t},h=e=>-1!==e.index,p=()=>document.createComment(""),u=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;function d(e,t){const{element:{content:s},parts:o}=e,r=document.createTreeWalker(s,133,null,!1);let i=m(o),n=o[i],a=-1,c=0;const l=[];let h=null;for(;r.nextNode();){a++;const e=r.currentNode;for(e.previousSibling===h&&(h=null),t.has(e)&&(l.push(e),null===h&&(h=e)),null!==h&&c++;void 0!==n&&n.index===a;)n.index=null!==h?-1:n.index-c,i=m(o,i),n=o[i]}l.forEach(e=>e.parentNode.removeChild(e))}const f=e=>{let t=11===e.nodeType?0:1;const s=document.createTreeWalker(e,133,null,!1);for(;s.nextNode();)t++;return t},m=(e,t=-1)=>{for(let s=t+1;s<e.length;s++){const t=e[s];if(h(t))return s}return-1};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const g=new WeakMap,y=e=>"function"==typeof e&&g.has(e),w={},v={};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
class _{constructor(e,t,s){this.__parts=[],this.template=e,this.processor=t,this.options=s}update(e){let t=0;for(const s of this.__parts)void 0!==s&&s.setValue(e[t]),t++;for(const e of this.__parts)void 0!==e&&e.commit()}_clone(){const e=o?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),t=[],s=this.template.parts,r=document.createTreeWalker(e,133,null,!1);let i,n=0,a=0,c=r.nextNode();for(;n<s.length;)if(i=s[n],h(i)){for(;a<i.index;)a++,"TEMPLATE"===c.nodeName&&(t.push(c),r.currentNode=c.content),null===(c=r.nextNode())&&(r.currentNode=t.pop(),c=r.nextNode());if("node"===i.type){const e=this.processor.handleTextExpression(this.options);e.insertAfterNode(c.previousSibling),this.__parts.push(e)}else this.__parts.push(...this.processor.handleAttributeExpressions(c,i.name,i.strings,this.options));n++}else this.__parts.push(void 0),n++;return o&&(document.adoptNode(e),customElements.upgrade(e)),e}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const S=` ${i} `;class b{constructor(e,t,s,o){this.strings=e,this.values=t,this.type=s,this.processor=o}getHTML(){const e=this.strings.length-1;let t="",s=!1;for(let o=0;o<e;o++){const e=this.strings[o],r=e.lastIndexOf("\x3c!--");s=(r>-1||s)&&-1===e.indexOf("--\x3e",r+1);const a=u.exec(e);t+=null===a?e+(s?S:n):e.substr(0,a.index)+a[1]+a[2]+"$lit$"+a[3]+i}return t+=this.strings[e],t}getTemplateElement(){const e=document.createElement("template");return e.innerHTML=this.getHTML(),e}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const P=e=>null===e||!("object"==typeof e||"function"==typeof e),x=e=>Array.isArray(e)||!(!e||!e[Symbol.iterator]);class C{constructor(e,t,s){this.dirty=!0,this.element=e,this.name=t,this.strings=s,this.parts=[];for(let e=0;e<s.length-1;e++)this.parts[e]=this._createPart()}_createPart(){return new E(this)}_getValue(){const e=this.strings,t=e.length-1;let s="";for(let o=0;o<t;o++){s+=e[o];const t=this.parts[o];if(void 0!==t){const e=t.value;if(P(e)||!x(e))s+="string"==typeof e?e:String(e);else for(const t of e)s+="string"==typeof t?t:String(t)}}return s+=e[t],s}commit(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}}class E{constructor(e){this.value=void 0,this.committer=e}setValue(e){e===w||P(e)&&e===this.value||(this.value=e,y(e)||(this.committer.dirty=!0))}commit(){for(;y(this.value);){const e=this.value;this.value=w,e(this)}this.value!==w&&this.committer.commit()}}class A{constructor(e){this.value=void 0,this.__pendingValue=void 0,this.options=e}appendInto(e){this.startNode=e.appendChild(p()),this.endNode=e.appendChild(p())}insertAfterNode(e){this.startNode=e,this.endNode=e.nextSibling}appendIntoPart(e){e.__insert(this.startNode=p()),e.__insert(this.endNode=p())}insertAfterPart(e){e.__insert(this.startNode=p()),this.endNode=e.endNode,e.endNode=this.startNode}setValue(e){this.__pendingValue=e}commit(){if(null===this.startNode.parentNode)return;for(;y(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=w,e(this)}const e=this.__pendingValue;e!==w&&(P(e)?e!==this.value&&this.__commitText(e):e instanceof b?this.__commitTemplateResult(e):e instanceof Node?this.__commitNode(e):x(e)?this.__commitIterable(e):e===v?(this.value=v,this.clear()):this.__commitText(e))}__insert(e){this.endNode.parentNode.insertBefore(e,this.endNode)}__commitNode(e){this.value!==e&&(this.clear(),this.__insert(e),this.value=e)}__commitText(e){const t=this.startNode.nextSibling,s="string"==typeof(e=null==e?"":e)?e:String(e);t===this.endNode.previousSibling&&3===t.nodeType?t.data=s:this.__commitNode(document.createTextNode(s)),this.value=e}__commitTemplateResult(e){const t=this.options.templateFactory(e);if(this.value instanceof _&&this.value.template===t)this.value.update(e.values);else{const s=new _(t,e.processor,this.options),o=s._clone();s.update(e.values),this.__commitNode(o),this.value=s}}__commitIterable(e){Array.isArray(this.value)||(this.value=[],this.clear());const t=this.value;let s,o=0;for(const r of e)s=t[o],void 0===s&&(s=new A(this.options),t.push(s),0===o?s.appendIntoPart(this):s.insertAfterPart(t[o-1])),s.setValue(r),s.commit(),o++;o<t.length&&(t.length=o,this.clear(s&&s.endNode))}clear(e=this.startNode){r(this.startNode.parentNode,e.nextSibling,this.endNode)}}class k{constructor(e,t,s){if(this.value=void 0,this.__pendingValue=void 0,2!==s.length||""!==s[0]||""!==s[1])throw new Error("Boolean attributes can only contain a single expression");this.element=e,this.name=t,this.strings=s}setValue(e){this.__pendingValue=e}commit(){for(;y(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=w,e(this)}if(this.__pendingValue===w)return;const e=!!this.__pendingValue;this.value!==e&&(e?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name),this.value=e),this.__pendingValue=w}}class N extends C{constructor(e,t,s){super(e,t,s),this.single=2===s.length&&""===s[0]&&""===s[1]}_createPart(){return new T(this)}_getValue(){return this.single?this.parts[0].value:super._getValue()}commit(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}}class T extends E{}let q=!1;(()=>{try{const e={get capture(){return q=!0,!1}};window.addEventListener("test",e,e),window.removeEventListener("test",e,e)}catch(e){}})();class M{constructor(e,t,s){this.value=void 0,this.__pendingValue=void 0,this.element=e,this.eventName=t,this.eventContext=s,this.__boundHandleEvent=e=>this.handleEvent(e)}setValue(e){this.__pendingValue=e}commit(){for(;y(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=w,e(this)}if(this.__pendingValue===w)return;const e=this.__pendingValue,t=this.value,s=null==e||null!=t&&(e.capture!==t.capture||e.once!==t.once||e.passive!==t.passive),o=null!=e&&(null==t||s);s&&this.element.removeEventListener(this.eventName,this.__boundHandleEvent,this.__options),o&&(this.__options=O(e),this.element.addEventListener(this.eventName,this.__boundHandleEvent,this.__options)),this.value=e,this.__pendingValue=w}handleEvent(e){"function"==typeof this.value?this.value.call(this.eventContext||this.element,e):this.value.handleEvent(e)}}const O=e=>e&&(q?{capture:e.capture,passive:e.passive,once:e.once}:e.capture)
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */;function V(e){let t=H.get(e.type);void 0===t&&(t={stringsArray:new WeakMap,keyString:new Map},H.set(e.type,t));let s=t.stringsArray.get(e.strings);if(void 0!==s)return s;const o=e.strings.join(i);return s=t.keyString.get(o),void 0===s&&(s=new c(e,e.getTemplateElement()),t.keyString.set(o,s)),t.stringsArray.set(e.strings,s),s}const H=new Map,j=new WeakMap;
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const L=new
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
class{handleAttributeExpressions(e,t,s,o){const r=t[0];if("."===r){return new N(e,t.slice(1),s).parts}return"@"===r?[new M(e,t.slice(1),o.eventContext)]:"?"===r?[new k(e,t.slice(1),s)]:new C(e,t,s).parts}handleTextExpression(e){return new A(e)}};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */"undefined"!=typeof window&&(window.litHtmlVersions||(window.litHtmlVersions=[])).push("1.2.1");const $=(e,...t)=>new b(e,t,"html",L),I=(e,t)=>`${e}--${t}`;let B=!0;void 0===window.ShadyCSS?B=!1:void 0===window.ShadyCSS.prepareTemplateDom&&(console.warn("Incompatible ShadyCSS version detected. Please update to at least @webcomponents/webcomponentsjs@2.0.2 and @webcomponents/shadycss@1.3.1."),B=!1);const R=e=>t=>{const s=I(t.type,e);let o=H.get(s);void 0===o&&(o={stringsArray:new WeakMap,keyString:new Map},H.set(s,o));let r=o.stringsArray.get(t.strings);if(void 0!==r)return r;const n=t.strings.join(i);if(r=o.keyString.get(n),void 0===r){const s=t.getTemplateElement();B&&window.ShadyCSS.prepareTemplateDom(s,e),r=new c(t,s),o.keyString.set(n,r)}return o.stringsArray.set(t.strings,r),r},U=["html","svg"],W=new Set,K=(e,t,s)=>{W.add(e);const o=s?s.element:document.createElement("template"),r=t.querySelectorAll("style"),{length:i}=r;if(0===i)return void window.ShadyCSS.prepareTemplateStyles(o,e);const n=document.createElement("style");for(let e=0;e<i;e++){const t=r[e];t.parentNode.removeChild(t),n.textContent+=t.textContent}(e=>{U.forEach(t=>{const s=H.get(I(t,e));void 0!==s&&s.keyString.forEach(e=>{const{element:{content:t}}=e,s=new Set;Array.from(t.querySelectorAll("style")).forEach(e=>{s.add(e)}),d(e,s)})})})(e);const a=o.content;s?function(e,t,s=null){const{element:{content:o},parts:r}=e;if(null==s)return void o.appendChild(t);const i=document.createTreeWalker(o,133,null,!1);let n=m(r),a=0,c=-1;for(;i.nextNode();){for(c++,i.currentNode===s&&(a=f(t),s.parentNode.insertBefore(t,s));-1!==n&&r[n].index===c;){if(a>0){for(;-1!==n;)r[n].index+=a,n=m(r,n);return}n=m(r,n)}}}(s,n,a.firstChild):a.insertBefore(n,a.firstChild),window.ShadyCSS.prepareTemplateStyles(o,e);const c=a.querySelector("style");if(window.ShadyCSS.nativeShadow&&null!==c)t.insertBefore(c.cloneNode(!0),t.firstChild);else if(s){a.insertBefore(n,a.firstChild);const e=new Set;e.add(n),d(s,e)}};window.JSCompiler_renameProperty=(e,t)=>e;const z={toAttribute(e,t){switch(t){case Boolean:return e?"":null;case Object:case Array:return null==e?e:JSON.stringify(e)}return e},fromAttribute(e,t){switch(t){case Boolean:return null!==e;case Number:return null===e?null:Number(e);case Object:case Array:return JSON.parse(e)}return e}},F=(e,t)=>t!==e&&(t==t||e==e),D={attribute:!0,type:String,converter:z,reflect:!1,hasChanged:F};class J extends HTMLElement{constructor(){super(),this._updateState=0,this._instanceProperties=void 0,this._updatePromise=new Promise(e=>this._enableUpdatingResolver=e),this._changedProperties=new Map,this._reflectingProperties=void 0,this.initialize()}static get observedAttributes(){this.finalize();const e=[];return this._classProperties.forEach((t,s)=>{const o=this._attributeNameForProperty(s,t);void 0!==o&&(this._attributeToPropertyMap.set(o,s),e.push(o))}),e}static _ensureClassProperties(){if(!this.hasOwnProperty(JSCompiler_renameProperty("_classProperties",this))){this._classProperties=new Map;const e=Object.getPrototypeOf(this)._classProperties;void 0!==e&&e.forEach((e,t)=>this._classProperties.set(t,e))}}static createProperty(e,t=D){if(this._ensureClassProperties(),this._classProperties.set(e,t),t.noAccessor||this.prototype.hasOwnProperty(e))return;const s="symbol"==typeof e?Symbol():`__${e}`,o=this.getPropertyDescriptor(e,s,t);void 0!==o&&Object.defineProperty(this.prototype,e,o)}static getPropertyDescriptor(e,t,s){return{get(){return this[t]},set(s){const o=this[e];this[t]=s,this._requestUpdate(e,o)},configurable:!0,enumerable:!0}}static getPropertyOptions(e){return this._classProperties&&this._classProperties.get(e)||D}static finalize(){const e=Object.getPrototypeOf(this);if(e.hasOwnProperty("finalized")||e.finalize(),this.finalized=!0,this._ensureClassProperties(),this._attributeToPropertyMap=new Map,this.hasOwnProperty(JSCompiler_renameProperty("properties",this))){const e=this.properties,t=[...Object.getOwnPropertyNames(e),..."function"==typeof Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(e):[]];for(const s of t)this.createProperty(s,e[s])}}static _attributeNameForProperty(e,t){const s=t.attribute;return!1===s?void 0:"string"==typeof s?s:"string"==typeof e?e.toLowerCase():void 0}static _valueHasChanged(e,t,s=F){return s(e,t)}static _propertyValueFromAttribute(e,t){const s=t.type,o=t.converter||z,r="function"==typeof o?o:o.fromAttribute;return r?r(e,s):e}static _propertyValueToAttribute(e,t){if(void 0===t.reflect)return;const s=t.type,o=t.converter;return(o&&o.toAttribute||z.toAttribute)(e,s)}initialize(){this._saveInstanceProperties(),this._requestUpdate()}_saveInstanceProperties(){this.constructor._classProperties.forEach((e,t)=>{if(this.hasOwnProperty(t)){const e=this[t];delete this[t],this._instanceProperties||(this._instanceProperties=new Map),this._instanceProperties.set(t,e)}})}_applyInstanceProperties(){this._instanceProperties.forEach((e,t)=>this[t]=e),this._instanceProperties=void 0}connectedCallback(){this.enableUpdating()}enableUpdating(){void 0!==this._enableUpdatingResolver&&(this._enableUpdatingResolver(),this._enableUpdatingResolver=void 0)}disconnectedCallback(){}attributeChangedCallback(e,t,s){t!==s&&this._attributeToProperty(e,s)}_propertyToAttribute(e,t,s=D){const o=this.constructor,r=o._attributeNameForProperty(e,s);if(void 0!==r){const e=o._propertyValueToAttribute(t,s);if(void 0===e)return;this._updateState=8|this._updateState,null==e?this.removeAttribute(r):this.setAttribute(r,e),this._updateState=-9&this._updateState}}_attributeToProperty(e,t){if(8&this._updateState)return;const s=this.constructor,o=s._attributeToPropertyMap.get(e);if(void 0!==o){const e=s.getPropertyOptions(o);this._updateState=16|this._updateState,this[o]=s._propertyValueFromAttribute(t,e),this._updateState=-17&this._updateState}}_requestUpdate(e,t){let s=!0;if(void 0!==e){const o=this.constructor,r=o.getPropertyOptions(e);o._valueHasChanged(this[e],t,r.hasChanged)?(this._changedProperties.has(e)||this._changedProperties.set(e,t),!0!==r.reflect||16&this._updateState||(void 0===this._reflectingProperties&&(this._reflectingProperties=new Map),this._reflectingProperties.set(e,r))):s=!1}!this._hasRequestedUpdate&&s&&(this._updatePromise=this._enqueueUpdate())}requestUpdate(e,t){return this._requestUpdate(e,t),this.updateComplete}async _enqueueUpdate(){this._updateState=4|this._updateState;try{await this._updatePromise}catch(e){}const e=this.performUpdate();return null!=e&&await e,!this._hasRequestedUpdate}get _hasRequestedUpdate(){return 4&this._updateState}get hasUpdated(){return 1&this._updateState}performUpdate(){this._instanceProperties&&this._applyInstanceProperties();let e=!1;const t=this._changedProperties;try{e=this.shouldUpdate(t),e?this.update(t):this._markUpdated()}catch(t){throw e=!1,this._markUpdated(),t}e&&(1&this._updateState||(this._updateState=1|this._updateState,this.firstUpdated(t)),this.updated(t))}_markUpdated(){this._changedProperties=new Map,this._updateState=-5&this._updateState}get updateComplete(){return this._getUpdateComplete()}_getUpdateComplete(){return this._updatePromise}shouldUpdate(e){return!0}update(e){void 0!==this._reflectingProperties&&this._reflectingProperties.size>0&&(this._reflectingProperties.forEach((e,t)=>this._propertyToAttribute(t,this[t],e)),this._reflectingProperties=void 0),this._markUpdated()}updated(e){}firstUpdated(e){}}J.finalized=!0;
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const Q=e=>t=>"function"==typeof t?((e,t)=>(window.customElements.define(e,t),t))(e,t):((e,t)=>{const{kind:s,elements:o}=t;return{kind:s,elements:o,finisher(t){window.customElements.define(e,t)}}})(e,t),G=(e,t)=>"method"===t.kind&&t.descriptor&&!("value"in t.descriptor)?Object.assign(Object.assign({},t),{finisher(s){s.createProperty(t.key,e)}}):{kind:"field",key:Symbol(),placement:"own",descriptor:{},initializer(){"function"==typeof t.initializer&&(this[t.key]=t.initializer.call(this))},finisher(s){s.createProperty(t.key,e)}};function X(e){return(t,s)=>void 0!==s?((e,t,s)=>{t.constructor.createProperty(s,e)})(e,t,s):G(e,t)}
/**
@license
Copyright (c) 2019 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
part of the polymer project is also subject to an additional IP rights grant
found at http://polymer.github.io/PATENTS.txt
*/
const Y="adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,Z=Symbol();class ee{constructor(e,t){if(t!==Z)throw new Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=e}get styleSheet(){return void 0===this._styleSheet&&(Y?(this._styleSheet=new CSSStyleSheet,this._styleSheet.replaceSync(this.cssText)):this._styleSheet=null),this._styleSheet}toString(){return this.cssText}}const te=(e,...t)=>{const s=t.reduce((t,s,o)=>t+(e=>{if(e instanceof ee)return e.cssText;if("number"==typeof e)return e;throw new Error(`Value passed to 'css' function must be a 'css' function result: ${e}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`)})(s)+e[o+1],e[0]);return new ee(s,Z)};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
(window.litElementVersions||(window.litElementVersions=[])).push("2.3.1");const se={};class oe extends J{static getStyles(){return this.styles}static _getUniqueStyles(){if(this.hasOwnProperty(JSCompiler_renameProperty("_styles",this)))return;const e=this.getStyles();if(void 0===e)this._styles=[];else if(Array.isArray(e)){const t=(e,s)=>e.reduceRight((e,s)=>Array.isArray(s)?t(s,e):(e.add(s),e),s),s=t(e,new Set),o=[];s.forEach(e=>o.unshift(e)),this._styles=o}else this._styles=[e]}initialize(){super.initialize(),this.constructor._getUniqueStyles(),this.renderRoot=this.createRenderRoot(),window.ShadowRoot&&this.renderRoot instanceof window.ShadowRoot&&this.adoptStyles()}createRenderRoot(){return this.attachShadow({mode:"open"})}adoptStyles(){const e=this.constructor._styles;0!==e.length&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow?Y?this.renderRoot.adoptedStyleSheets=e.map(e=>e.styleSheet):this._needsShimAdoptedStyleSheets=!0:window.ShadyCSS.ScopingShim.prepareAdoptedCssText(e.map(e=>e.cssText),this.localName))}connectedCallback(){super.connectedCallback(),this.hasUpdated&&void 0!==window.ShadyCSS&&window.ShadyCSS.styleElement(this)}update(e){const t=this.render();super.update(e),t!==se&&this.constructor.render(t,this.renderRoot,{scopeName:this.localName,eventContext:this}),this._needsShimAdoptedStyleSheets&&(this._needsShimAdoptedStyleSheets=!1,this.constructor._styles.forEach(e=>{const t=document.createElement("style");t.textContent=e.cssText,this.renderRoot.appendChild(t)}))}render(){return se}}oe.finalized=!0,oe.render=(e,t,s)=>{if(!s||"object"!=typeof s||!s.scopeName)throw new Error("The `scopeName` option is required.");const o=s.scopeName,i=j.has(t),n=B&&11===t.nodeType&&!!t.host,a=n&&!W.has(o),c=a?document.createDocumentFragment():t;if(((e,t,s)=>{let o=j.get(t);void 0===o&&(r(t,t.firstChild),j.set(t,o=new A(Object.assign({templateFactory:V},s))),o.appendInto(t)),o.setValue(e),o.commit()})(e,c,Object.assign({templateFactory:R(o)},s)),a){const e=j.get(c);j.delete(c);const s=e.value instanceof _?e.value.template:void 0;K(o,c,s),r(t,t.firstChild),t.appendChild(c),j.set(t,e)}!i&&n&&window.ShadyCSS.styleElement(t.host)};function re(e){const t={};for(const s of e)t[s.row+","+s.col]=!0;return Object.keys(t).map(e=>({row:parseInt(e.split(",")[0]),col:parseInt(e.split(",")[1])}))}const ie=Error("not implemented");var ne,ae;!function(e){e.WHITE="white",e.BLACK="black"}(ne||(ne={})),function(e){e.MOVE="move",e.CASTLE="castle",e.ENPASSANT="enpassant"}(ae||(ae={}));
/**
 * @license
 * Copyright (c) 2019 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
var ce=function(e,t,s,o){var r,i=arguments.length,n=i<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,s):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(e,t,s,o);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(n=(i<3?r(n):i>3?r(t,s,n):r(t,s))||n);return i>3&&n&&Object.defineProperty(t,s,n),n};let le=class extends oe{render(){return $`
      <div
        class="piece"
        style="background-image:url(/dist/img/${this.piece.img})"
      ></div>
    `}};le.styles=te`
    .piece {
      height: 100%;
      width: 100%;
      display: inline-block;
      background-image: url('/dist/img/_dt.png');
      background-size: cover;
    }
  `,ce([X({type:Object})],le.prototype,"piece",void 0),le=ce([Q("my-piece")],le);var he=function(e,t,s,o){var r,i=arguments.length,n=i<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,s):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(e,t,s,o);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(n=(i<3?r(n):i>3?r(t,s,n):r(t,s))||n);return i>3&&n&&Object.defineProperty(t,s,n),n};let pe=class extends oe{constructor(){super(...arguments),this.selected=!1,this.possible=!1}render(){return $`
      <div
        class="square"
        @click=${this._onClick}
        style="
        height:100%;width:100%;background-color:${this.selected?"rgba(0, 0, 255, 0.3)":this.possible?"rgba(0, 255, 0, 0.3)":""};transform:${this.color===ne.BLACK?"rotate(180deg)":""};
      "
      >
        ${this.piece&&$`<my-piece .piece=${this.piece}></my-piece>`}
      </div>
    `}_onClick(){this.dispatchEvent(new CustomEvent("square-clicked",{bubbles:!0,composed:!0,detail:this.square}))}};pe.styles=te`
    :host {
      height: ${50}px;
      width: ${50}px;
      display: inline-block;
    }

    .square {
      height: '100%';
      width: '100%';
      display: 'inline-block';
    }
  `,he([X({type:Object})],pe.prototype,"square",void 0),he([X({type:Object})],pe.prototype,"piece",void 0),he([X({type:String})],pe.prototype,"color",void 0),he([X({type:Boolean})],pe.prototype,"selected",void 0),he([X({type:Boolean})],pe.prototype,"possible",void 0),pe=he([Q("my-square")],pe);class ue{constructor(e,t){this.row=e,this.col=t}get occupant(){return this.piece}toString(){return this.occupant?`[${this.occupant.toString()}]`:"[ ]"}render(){const e=document.createElement("div");return e.setAttribute("class","square"),this.occupant&&e.appendChild(this.occupant.render()),e.onclick=t=>{e.dispatchEvent(new CustomEvent("square-clicked",{detail:this}))},e}empty(){this.piece=void 0}place(e){this.piece=e}}class de{constructor(e){this.ranks=8,this.files=8,this.ranks=e.length,this.files=e[0].length;const t=[];for(const s of e){const e=[];for(const t of s){const s=new ue(t.row,t.col);e.push(s),t.occupant&&s.place(t.occupant)}t.push(e)}this.squares=t}place(e,t,s){const o=this.getSquare(t,s);if(!o)throw new Error("square out of bounds"+t+","+s);return o.place(e),this}empty(e,t){const s=this.getSquare(e,t);if(!s)throw new Error("square out of bounds"+e+","+t);return s.empty(),this}getSquare(e,t){var s;return null===(s=this.squares[e])||void 0===s?void 0:s[t]}toString(){let e="";for(const t of this.squares){for(const s of t)e+=s.toString();e+="<br>"}return e}}class fe{constructor(e){this.color=e}legalMoves(e,t,s,o){return[]}toString(){return this.name}get img(){return this.color===ne.WHITE?"_lt.png":"_dt.png"}render(){const e=document.createElement("div");return e.setAttribute("class","piece"),e.style.backgroundImage=`url(/dist/img/${this.img})`,e}}class me extends fe{legalMoves(e,t,s){var o;let r=this.moves.flatMap(e=>[-1,1].map(t=>e.row*t).flatMap(t=>[-1,1].flatMap(s=>[{row:t,col:e.col*s},{row:e.col*s,col:t}]))).map(s=>({row:e+s.row,col:t+s.col}));r=r.filter(e=>!(e.row<0||e.col<0||e.row>=s.ranks||e.col>=s.files)),r=r.filter(e=>{var t;const o=null===(t=s.getSquare(e.row,e.col))||void 0===t?void 0:t.occupant;return!o||o.color!==this.color});const i=[];for(const n of re(r)){const r=null===(o=s.getSquare(n.row,n.col))||void 0===o?void 0:o.occupant,a=r&&r.color!==this.color;i.push({before:s,after:new de(s.squares).place(this,n.row,n.col).empty(e,t),piece:this,start:{row:e,col:t},end:n,isCapture:a,captured:r?[r]:[],color:this.color,type:ae.MOVE})}return i}}class ge extends fe{legalMoves(e,t,s){return re(this.moves.flatMap(e=>[-1,1].map(t=>e.row*t).flatMap(t=>[-1,1].flatMap(s=>[{row:t,col:e.col*s},{row:e.col*s,col:t}])))).flatMap(o=>this.ride(e,t,o.row,o.col,s))}ride(e,t,s,o,r){const i=[];let n=r.getSquare(e+s,t+o);for(;n;){if(!n.occupant||n.occupant.color!==this.color){const s=n.occupant&&n.occupant.color!==this.color;i.push({before:r,after:new de(r.squares).place(this,n.row,n.col).empty(e,t),piece:this,start:{row:e,col:t},end:n,isCapture:s,captured:s?[n.occupant]:[],color:this.color,type:ae.MOVE})}if(n.occupant)break;n=r.getSquare(n.row+s,n.col+o)}return i}}class ye extends ge{constructor(){super(...arguments),this.name="B",this.moves=[{row:1,col:1}]}get img(){if(this.color===ne.BLACK)return"bdt.png";if(this.color===ne.WHITE)return"blt.png";throw new Error("no image for color: "+this.color+"for piece "+this.name)}}class we extends ge{constructor(){super(...arguments),this.name="R",this.moves=[{row:1,col:0}]}get img(){if(this.color===ne.BLACK)return"rdt45.png";if(this.color===ne.WHITE)return"rlt45.png";throw new Error("no image for color: "+this.color+"for piece "+this.name)}}class ve extends me{constructor(){super(...arguments),this.name="N",this.moves=[{row:1,col:2}]}get img(){if(this.color===ne.BLACK)return"ndt26.png";if(this.color===ne.WHITE)return"nlt.png";throw new Error("no image for color: "+this.color+"for piece "+this.name)}}class _e extends ge{constructor(){super(...arguments),this.name="Q",this.moves=[{row:1,col:1},{row:1,col:0}]}get img(){if(this.color===ne.BLACK)return"qdt45.png";if(this.color===ne.WHITE)return"qlt45.png";throw new Error("no image for color: "+this.color+"for piece "+this.name)}}class Se extends me{constructor(){super(...arguments),this.name="K",this.moves=[{row:1,col:1},{row:1,col:0}],this.isRoyal=!0}get img(){if(this.color===ne.BLACK)return"kdt45.png";if(this.color===ne.WHITE)return"klt.png";throw new Error("no image for color: "+this.color+"for piece "+this.name)}}class be extends fe{constructor(){super(...arguments),this.name="P"}legalMoves(e,t,s,o){const r=this.color===ne.WHITE?-1:1;let i=[{row:e+r,col:t}];(1===e&&this.color===ne.BLACK||e===s.ranks-1-1&&this.color===ne.WHITE)&&i.push({row:e+2*r,col:t}),i=i.filter(e=>!s.getSquare(e.row,e.col).occupant);let n=[{row:e+r,col:t-1},{row:e+r,col:t+1}];n=n.filter(e=>{var t;const o=null===(t=s.getSquare(e.row,e.col))||void 0===t?void 0:t.occupant;return o&&o.color!==this.color});const a=[];for(const o of i)a.push({before:s,after:new de(s.squares).place(this,o.row,o.col).empty(e,t),piece:this,start:{row:e,col:t},end:o,isCapture:!1,captured:[],color:this.color,type:ae.MOVE});for(const o of n)a.push({before:s,after:new de(s.squares).place(this,o.row,o.col).empty(e,t),piece:this,start:{row:e,col:t},end:o,isCapture:!0,captured:[s.getSquare(o.row,o.col).occupant],color:this.color,type:ae.MOVE});const c=this.enPassant(e,t,s,o);return c&&a.push(c),a}enPassant(e,t,s,o){const r=this.color===ne.WHITE?-1:1;if(o.length){const i=o[o.length-1];if(i.piece instanceof be&&i.piece.color!==this.color&&1===Math.abs(i.end.col-t)&&2===Math.abs(i.end.row-i.start.row)&&i.end.row===e){const o=s,n={row:e,col:t},a={row:e+r,col:i.end.col},c=!0,l=c?[i.piece]:[],h=this.color,p=ae.ENPASSANT;return{before:o,after:new de(s.squares).place(this,a.row,a.col).empty(e,t).empty(i.end.row,i.end.col),piece:this,start:n,end:a,isCapture:c,captured:l,color:h,type:p}}}}promote(){}get img(){if(this.color===ne.BLACK)return"pdt45.png";if(this.color===ne.WHITE)return"plt45.png";throw new Error("no image for color: "+this.color+"for piece "+this.name)}}class Pe{constructor(e){this.state=null!=e?e:function(){var e;const t={0:{0:new we(ne.BLACK),1:new ve(ne.BLACK),2:new ye(ne.BLACK),3:new _e(ne.BLACK),4:new Se(ne.BLACK),5:new ye(ne.BLACK),6:new ve(ne.BLACK),7:new we(ne.BLACK)},1:{},6:{},7:{0:new we(ne.WHITE),1:new ve(ne.WHITE),2:new ye(ne.WHITE),3:new _e(ne.WHITE),4:new Se(ne.WHITE),5:new ye(ne.WHITE),6:new ve(ne.WHITE),7:new we(ne.WHITE)}};for(let e=0;e<8;e++)t[1][e]=new be(ne.BLACK),t[6][e]=new be(ne.WHITE);const s=[];for(let o=0;o<8;o++){const r=[];for(let s=0;s<8;s++){const i=new ue(o,s);r.push(i),(null===(e=t[o])||void 0===e?void 0:e[s])&&i.place(t[o][s])}s.push(r)}return new de(s)}(),this.moveHistory=[],this.stateHistory=[]}get rules(){throw ie}place(e,t,s){this.state.place(e,t,s)}winCondition(e,t){throw ie}move(){}attemptMove(e,t,s,o){if(e instanceof Se&&t===o.row&&2===Math.abs(s-o.col))return void this.castle(e.color,t,s,o.col-s>0);const r=e.legalMoves(t,s,this.state,this.moveHistory).filter(e=>this.isMoveLegal(e)),i=r.find(e=>{return t=e.end,s=o,t.row===s.row&&t.col===s.col;var t,s});if(!i)return console.log("invalid move",e.name,o),void console.log("legal moves are",r);i.isCapture&&this.captureEffects(),this.moveHistory.push(i),this.stateHistory.push(i.after),this.state=i.after}castle(e,t,s,o){let r,i,n;if(console.log("attempting castle"),this.moveHistory.some(e=>e.piece instanceof Se))return void console.log("king moved");const a=this.state.squares.flat().filter(t=>t.occupant&&t.occupant instanceof we&&t.occupant.color===e);if(!a)return void console.log("no rooks");if(o){r={row:e===ne.BLACK?0:this.state.ranks-1,col:this.state.files-2},i=[s];for(let e=s+1;e<=r.col;e++)i.push(e);n=a.sort(e=>e.col)[a.length-1]}else{r={row:e===ne.BLACK?0:this.state.ranks-1,col:2},i=[s];for(let e=s-1;e>=r.col;e--)i.push(e);n=a.sort(e=>e.col)[0]}if(this.moveHistory.some(e=>e.piece===n.occupant))return void console.log("rook moved");if(i.some(s=>this.isAttackedSquare(e,this.state,t,s)||this.state.getSquare(t,s).occupant&&this.state.getSquare(t,s).occupant!==n.occupant&&!(this.state.getSquare(t,s).occupant instanceof Se)))return void console.log("cannot castle, attacked on way");const c=this.state,l=new de(this.state.squares).empty(n.row,n.col).empty(t,s).place(new Se(e),r.row,r.col).place(new we(e),r.row,r.col+(o?-1:1)),h=ae.CASTLE;this.moveHistory.push({before:c,after:l,isCapture:!1,captured:[],type:h,color:e}),this.stateHistory.push(l),this.state=l}isMoveLegal(e){return!(e.end.row<0||e.end.row>=this.state.ranks||e.end.col<0||e.end.col>=this.state.files)&&!this.isInCheck(e.color,e.after)}isInCheck(e,t){return t.squares.flat().filter(t=>!!t.occupant&&t.occupant.color!==e).flatMap(e=>e.occupant.legalMoves(e.row,e.col,t,[])).some(e=>e.captured.some(e=>e.isRoyal))}isAttackedSquare(e,t,s,o){const r=new fe(e),i=new de(t.squares).place(r,s,o);return t.squares.flat().filter(t=>!!t.occupant&&t.occupant.color!==e).flatMap(e=>e.occupant.legalMoves(e.row,e.col,i,[])).some(e=>e.captured.some(e=>e===r))}captureEffects(){}}
/**
 * @license
 * Copyright (c) 2019 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */var xe=function(e,t,s,o){var r,i=arguments.length,n=i<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,s):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(e,t,s,o);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(n=(i<3?r(n):i>3?r(t,s,n):r(t,s))||n);return i>3&&n&&Object.defineProperty(t,s,n),n};let Ce=class extends oe{constructor(){super(...arguments),this.game=new Pe,this.count=0}connectedCallback(){super.connectedCallback(),this.addEventListener("square-clicked",this.onSquareClicked.bind(this))}disconnectedCallback(){super.disconnectedCallback(),this.removeEventListener("square-clicked",this.onSquareClicked.bind(this))}render(){const e=this.game.state;return this.style.setProperty("height",`${50*e.squares.length}px`),this.style.setProperty("width",`${50*e.squares[0].length}px`),this.color===ne.BLACK&&this.style.setProperty("transform","rotate(180deg)"),$`
      <div id="board">
        ${e.squares.map(e=>$`<div class="row">
            ${e.map(e=>$`<my-square
                .square=${e}
                .piece=${e.occupant}
                .selected=${e===this.selectedSquare}
                .possible=${this.possibleMoves.includes(e)}
                .color=${this.color}
              ></my-square>`)}
          </div>`)}
      </div>
    `}onSquareClicked(e){const t=e.detail;if(this.selectedPiece){if(this.selectedPiece===t.occupant)return void(this.selectedPiece=null);this.game.attemptMove(this.selectedPiece,this.selectedSquare.row,this.selectedSquare.col,t);this.selectedSquare=null,this.selectedPiece=null}else this.selectedSquare=t,this.selectedPiece=t.occupant;this.performUpdate()}get possibleMoves(){return this.selectedPiece?this.selectedPiece.legalMoves(this.selectedSquare.row,this.selectedSquare.col,this.game.state,this.game.moveHistory).filter(e=>this.game.isMoveLegal(e)).map(e=>this.game.state.getSquare(e.end.row,e.end.col)):[]}};Ce.styles=te`
    :host {
      display: block;
      border: solid 1px gray;
      padding: 16px;
      max-width: 800px;
    }

    #board {
      background-image: url('/dist/img/bg.svg');
      display: inline-block;
    }

    .row {
      height: ${50}px;
    }
  `,xe([X({type:String})],Ce.prototype,"color",void 0),xe([X({type:Object})],Ce.prototype,"game",void 0),xe([X({type:Object})],Ce.prototype,"selectedPiece",void 0),xe([X({type:Object})],Ce.prototype,"selectedSquare",void 0),xe([X({type:Number})],Ce.prototype,"count",void 0),Ce=xe([Q("my-element")],Ce)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,